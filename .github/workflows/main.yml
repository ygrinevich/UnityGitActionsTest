name: Build project

on: workflow_dispatch

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}

jobs:

  testInMode:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Project
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create LFS File List
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS Cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library Cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-buildAndTest-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-buildAndTest-
            Library-${{ matrix.projectPath }}-

      # Run tests
      - name: Run Tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ matrix.projectPath }}
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Upload test artifacts
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildForTargetPlatform:
    name: Build for ${{ matrix.targetPlatform }}
    runs-on: ubuntu-latest
    needs: testInMode
    strategy:
      fail-fast: false
      matrix:
        projectPath:
          - Project
        targetPlatform:
          - StandaloneWindows64
          - iOS
          - Android
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create LFS File List
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS Cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library Cache
        uses: actions/cache@v2
        with:
          path: ${{ matrix.projectPath }}/Library
          key: Library-${{ matrix.projectPath }}-buildAndTest-${{ matrix.targetPlatform }}
          restore-keys: |
            Library-${{ matrix.projectPath }}-buildAndTest-
            Library-${{ matrix.projectPath }}-

      # Build for configured platforms
      - name: Build Unity Project
        uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ matrix.projectPath }}
          targetPlatform: ${{ matrix.targetPlatform }}
          customParameters: "-myParameter myValue -myBoolean -ThirdParameter andItsValue"

      # Upload build artifacts
      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: Build (${{ matrix.targetPlatform }})
          path: build/${{ matrix.targetPlatform }}
