name: Build and release project

on:
  workflow_dispatch:
    inputs:
      targetPlatform:
        type: choice
        required: true
        description: Target platform for build
        options:
          - StandaloneWindows64
          - iOS
          - Android
      appBundleId:
        type: choice
        required: true
        description: Application Bundle Id
        options:
          - com.heyworks.fastlanetest
          - com.heyworks.fastlanestage

env:
  UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  PROJECT_PATH: Project

jobs:

  testInMode:
    name: Test in ${{ matrix.testMode }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        testMode:
          - EditMode
          - PlayMode
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create LFS File List
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS Cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-tests-${{ hashFiles(format('{0}/Assets/**', env.PROJECT_PATH), format('{0}/Packages/**', env.PROJECT_PATH), format('{0}/ProjectSettings/**', env.PROJECT_PATH)) }}
          restore-keys: |
            Library-tests-
            Library-

      # Run tests
      - name: Run Tests
        uses: game-ci/unity-test-runner@v2
        id: testRunner
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          testMode: ${{ matrix.testMode }}
          checkName: ${{ matrix.testMode }} test results
          githubToken: ${{ secrets.GITHUB_TOKEN }}

      # Upload test artifacts
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: Test results for ${{ matrix.testMode }}
          path: ${{ steps.testRunner.outputs.artifactsPath }}

  buildForTargetPlatform:
    name: Build for ${{ github.event.inputs.targetPlatform }}
    runs-on: ubuntu-latest
    needs: testInMode
    outputs:
      buildVersion: ${{ steps.buildUnityProject.outputs.buildVersion }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Create LFS File List
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS Cache
        uses: actions/cache@v2
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library Cache
        uses: actions/cache@v2
        with:
          path: ${{ env.PROJECT_PATH }}/Library
          key: Library-build-${{ github.event.inputs.targetPlatform }}-${{ hashFiles(format('{0}/Assets/**', env.PROJECT_PATH), format('{0}/Packages/**', env.PROJECT_PATH), format('{0}/ProjectSettings/**', env.PROJECT_PATH)) }}
          restore-keys: |
            Library-build-${{ github.event.inputs.targetPlatform }}-
            Library-build-
            Library-

      # Build for configured platforms
      - name: Build Unity Project
        id: buildUnityProject
        uses: game-ci/unity-builder@v2
        with:
          projectPath: ${{ env.PROJECT_PATH }}
          targetPlatform: ${{ github.event.inputs.targetPlatform }}
          versioning: None
          buildMethod: UnityBuilderAction.Builder.Build
          customParameters: "-appBundleId ${{ github.event.inputs.appBundleId }}"

      # Upload build artifacts
      - name: Upload Build
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ github.event.inputs.targetPlatform }}
          path: build/${{ github.event.inputs.targetPlatform }}

  releaseToAppStore:
    name: Release to the App Store
    runs-on: macos-10.15
    needs: buildForTargetPlatform
    if: github.event.inputs.targetPlatform == 'iOS'
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Download iOS Artifact
        uses: actions/download-artifact@v2
        with:
          name: build-iOS
          path: build/iOS
      - name: Fix File Permissions and Run Fastlane
        env:
          APPLE_CONNECT_EMAIL: ${{ secrets.APPLE_CONNECT_EMAIL }}
          APPLE_DEVELOPER_EMAIL: ${{ secrets.APPLE_DEVELOPER_EMAIL }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          MATCH_URL: ${{ secrets.MATCH_URL }}
          MATCH_PERSONAL_ACCESS_TOKEN: ${{ secrets.MATCH_PERSONAL_ACCESS_TOKEN }}
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          APPSTORE_KEY_ID: ${{ secrets.APPSTORE_KEY_ID }}
          APPSTORE_ISSUER_ID: ${{ secrets.APPSTORE_ISSUER_ID }}
          APPSTORE_P8: ${{ secrets.APPSTORE_P8 }}
          IOS_APP_ID: ${{ github.event.inputs.appBundleId }}
          IOS_BUILD_PATH: ${{ format('{0}/build/iOS', github.workspace) }}
        run: |
          find $IOS_BUILD_PATH -type f -name "**.sh" -exec chmod +x {} \;
          bundle install
          bundle exec fastlane ios beta
      - name: Cleanup to avoid storage limit
        uses: geekyeggo/delete-artifact@v1
        with:
          name: build-iOS
